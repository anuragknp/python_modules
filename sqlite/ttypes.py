#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class BindResultValueType:
  VALUE = 0
  NUMBER_OF_ROW_CHANGED = 1
  LAST_ROW_ID = 2

  _VALUES_TO_NAMES = {
    0: "VALUE",
    1: "NUMBER_OF_ROW_CHANGED",
    2: "LAST_ROW_ID",
  }

  _NAMES_TO_VALUES = {
    "VALUE": 0,
    "NUMBER_OF_ROW_CHANGED": 1,
    "LAST_ROW_ID": 2,
  }

class DirLevel:
  DIR_DATA_LEVEL = 1
  DIR_ORG_LEVEL = 2
  DIR_USER_LEVEL = 3

  _VALUES_TO_NAMES = {
    1: "DIR_DATA_LEVEL",
    2: "DIR_ORG_LEVEL",
    3: "DIR_USER_LEVEL",
  }

  _NAMES_TO_VALUES = {
    "DIR_DATA_LEVEL": 1,
    "DIR_ORG_LEVEL": 2,
    "DIR_USER_LEVEL": 3,
  }


class BindResultValue:
  """
  Attributes:
   - index_
   - type_
   - name_
   - result_index_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'index_', None, 0, ), # 1
    (2, TType.I32, 'type_', None,     0, ), # 2
    (3, TType.STRING, 'name_', None, "", ), # 3
    (4, TType.I64, 'result_index_', None, 0, ), # 4
  )

  def __init__(self, index_=thrift_spec[1][4], type_=thrift_spec[2][4], name_=thrift_spec[3][4], result_index_=thrift_spec[4][4],):
    self.index_ = index_
    self.type_ = type_
    self.name_ = name_
    self.result_index_ = result_index_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.index_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type_ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.result_index_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BindResultValue')
    if self.index_ is not None:
      oprot.writeFieldBegin('index_', TType.I64, 1)
      oprot.writeI64(self.index_)
      oprot.writeFieldEnd()
    if self.type_ is not None:
      oprot.writeFieldBegin('type_', TType.I32, 2)
      oprot.writeI32(self.type_)
      oprot.writeFieldEnd()
    if self.name_ is not None:
      oprot.writeFieldBegin('name_', TType.STRING, 3)
      oprot.writeString(self.name_)
      oprot.writeFieldEnd()
    if self.result_index_ is not None:
      oprot.writeFieldBegin('result_index_', TType.I64, 4)
      oprot.writeI64(self.result_index_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.index_ is None:
      raise TProtocol.TProtocolException(message='Required field index_ is unset!')
    if self.type_ is None:
      raise TProtocol.TProtocolException(message='Required field type_ is unset!')
    if self.name_ is None:
      raise TProtocol.TProtocolException(message='Required field name_ is unset!')
    if self.result_index_ is None:
      raise TProtocol.TProtocolException(message='Required field result_index_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StringAndNull:
  """
  Attributes:
   - value_
   - is_null_
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'value_', None, None, ), # 1
    (2, TType.BOOL, 'is_null_', None, False, ), # 2
  )

  def __init__(self, value_=None, is_null_=thrift_spec[2][4],):
    self.value_ = value_
    self.is_null_ = is_null_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.value_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_null_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StringAndNull')
    if self.value_ is not None:
      oprot.writeFieldBegin('value_', TType.STRING, 1)
      oprot.writeString(self.value_)
      oprot.writeFieldEnd()
    if self.is_null_ is not None:
      oprot.writeFieldBegin('is_null_', TType.BOOL, 2)
      oprot.writeBool(self.is_null_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value_ is None:
      raise TProtocol.TProtocolException(message='Required field value_ is unset!')
    if self.is_null_ is None:
      raise TProtocol.TProtocolException(message='Required field is_null_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Row:
  """
  Attributes:
   - string_value_
   - int64_value_
   - null_value_
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'string_value_', (TType.STRING,None,TType.STRING,None), None, ), # 1
    (2, TType.MAP, 'int64_value_', (TType.STRING,None,TType.I64,None), None, ), # 2
    (3, TType.MAP, 'null_value_', (TType.STRING,None,TType.I64,None), None, ), # 3
  )

  def __init__(self, string_value_=None, int64_value_=None, null_value_=None,):
    self.string_value_ = string_value_
    self.int64_value_ = int64_value_
    self.null_value_ = null_value_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.string_value_ = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.string_value_[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.int64_value_ = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin() 
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = iprot.readI64();
            self.int64_value_[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.null_value_ = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin() 
          for _i18 in xrange(_size14):
            _key19 = iprot.readString();
            _val20 = iprot.readI64();
            self.null_value_[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Row')
    if self.string_value_ is not None:
      oprot.writeFieldBegin('string_value_', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.string_value_))
      for kiter21,viter22 in self.string_value_.items():
        oprot.writeString(kiter21)
        oprot.writeString(viter22)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.int64_value_ is not None:
      oprot.writeFieldBegin('int64_value_', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.int64_value_))
      for kiter23,viter24 in self.int64_value_.items():
        oprot.writeString(kiter23)
        oprot.writeI64(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.null_value_ is not None:
      oprot.writeFieldBegin('null_value_', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.null_value_))
      for kiter25,viter26 in self.null_value_.items():
        oprot.writeString(kiter25)
        oprot.writeI64(viter26)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.string_value_ is None:
      raise TProtocol.TProtocolException(message='Required field string_value_ is unset!')
    if self.int64_value_ is None:
      raise TProtocol.TProtocolException(message='Required field int64_value_ is unset!')
    if self.null_value_ is None:
      raise TProtocol.TProtocolException(message='Required field null_value_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Statement:
  """
  Attributes:
   - query_
   - bind_text_
   - bind_int64_
   - bind_result_
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'query_', None, None, ), # 1
    (2, TType.MAP, 'bind_text_', (TType.I64,None,TType.STRING,None), None, ), # 2
    (3, TType.MAP, 'bind_int64_', (TType.I64,None,TType.I64,None), None, ), # 3
    (4, TType.MAP, 'bind_result_', (TType.I64,None,TType.STRUCT,(BindResultValue, BindResultValue.thrift_spec)), None, ), # 4
  )

  def __init__(self, query_=None, bind_text_=None, bind_int64_=None, bind_result_=None,):
    self.query_ = query_
    self.bind_text_ = bind_text_
    self.bind_int64_ = bind_int64_
    self.bind_result_ = bind_result_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.query_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.bind_text_ = {}
          (_ktype28, _vtype29, _size27 ) = iprot.readMapBegin() 
          for _i31 in xrange(_size27):
            _key32 = iprot.readI64();
            _val33 = iprot.readString();
            self.bind_text_[_key32] = _val33
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.bind_int64_ = {}
          (_ktype35, _vtype36, _size34 ) = iprot.readMapBegin() 
          for _i38 in xrange(_size34):
            _key39 = iprot.readI64();
            _val40 = iprot.readI64();
            self.bind_int64_[_key39] = _val40
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.bind_result_ = {}
          (_ktype42, _vtype43, _size41 ) = iprot.readMapBegin() 
          for _i45 in xrange(_size41):
            _key46 = iprot.readI64();
            _val47 = BindResultValue()
            _val47.read(iprot)
            self.bind_result_[_key46] = _val47
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Statement')
    if self.query_ is not None:
      oprot.writeFieldBegin('query_', TType.STRING, 1)
      oprot.writeString(self.query_)
      oprot.writeFieldEnd()
    if self.bind_text_ is not None:
      oprot.writeFieldBegin('bind_text_', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.bind_text_))
      for kiter48,viter49 in self.bind_text_.items():
        oprot.writeI64(kiter48)
        oprot.writeString(viter49)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.bind_int64_ is not None:
      oprot.writeFieldBegin('bind_int64_', TType.MAP, 3)
      oprot.writeMapBegin(TType.I64, TType.I64, len(self.bind_int64_))
      for kiter50,viter51 in self.bind_int64_.items():
        oprot.writeI64(kiter50)
        oprot.writeI64(viter51)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.bind_result_ is not None:
      oprot.writeFieldBegin('bind_result_', TType.MAP, 4)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.bind_result_))
      for kiter52,viter53 in self.bind_result_.items():
        oprot.writeI64(kiter52)
        viter53.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_ is None:
      raise TProtocol.TProtocolException(message='Required field query_ is unset!')
    if self.bind_text_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_text_ is unset!')
    if self.bind_int64_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_int64_ is unset!')
    if self.bind_result_ is None:
      raise TProtocol.TProtocolException(message='Required field bind_result_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultSet:
  """
  Attributes:
   - row_
   - last_insert_rowid_
   - number_of_rows_changed_
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'row_', (TType.STRUCT,(Row, Row.thrift_spec)), None, ), # 1
    (2, TType.I64, 'last_insert_rowid_', None, None, ), # 2
    (3, TType.I64, 'number_of_rows_changed_', None, None, ), # 3
  )

  def __init__(self, row_=None, last_insert_rowid_=None, number_of_rows_changed_=None,):
    self.row_ = row_
    self.last_insert_rowid_ = last_insert_rowid_
    self.number_of_rows_changed_ = number_of_rows_changed_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.row_ = []
          (_etype57, _size54) = iprot.readListBegin()
          for _i58 in xrange(_size54):
            _elem59 = Row()
            _elem59.read(iprot)
            self.row_.append(_elem59)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.last_insert_rowid_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.number_of_rows_changed_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultSet')
    if self.row_ is not None:
      oprot.writeFieldBegin('row_', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.row_))
      for iter60 in self.row_:
        iter60.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.last_insert_rowid_ is not None:
      oprot.writeFieldBegin('last_insert_rowid_', TType.I64, 2)
      oprot.writeI64(self.last_insert_rowid_)
      oprot.writeFieldEnd()
    if self.number_of_rows_changed_ is not None:
      oprot.writeFieldBegin('number_of_rows_changed_', TType.I64, 3)
      oprot.writeI64(self.number_of_rows_changed_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.row_ is None:
      raise TProtocol.TProtocolException(message='Required field row_ is unset!')
    if self.last_insert_rowid_ is None:
      raise TProtocol.TProtocolException(message='Required field last_insert_rowid_ is unset!')
    if self.number_of_rows_changed_ is None:
      raise TProtocol.TProtocolException(message='Required field number_of_rows_changed_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultSetArrayAndTimeTaken:
  """
  Attributes:
   - result_set_array_
   - time_taken_
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'result_set_array_', (TType.STRUCT,(ResultSet, ResultSet.thrift_spec)), None, ), # 1
    (2, TType.I64, 'time_taken_', None, None, ), # 2
  )

  def __init__(self, result_set_array_=None, time_taken_=None,):
    self.result_set_array_ = result_set_array_
    self.time_taken_ = time_taken_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.result_set_array_ = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = ResultSet()
            _elem66.read(iprot)
            self.result_set_array_.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.time_taken_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultSetArrayAndTimeTaken')
    if self.result_set_array_ is not None:
      oprot.writeFieldBegin('result_set_array_', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.result_set_array_))
      for iter67 in self.result_set_array_:
        iter67.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.time_taken_ is not None:
      oprot.writeFieldBegin('time_taken_', TType.I64, 2)
      oprot.writeI64(self.time_taken_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.result_set_array_ is None:
      raise TProtocol.TProtocolException(message='Required field result_set_array_ is unset!')
    if self.time_taken_ is None:
      raise TProtocol.TProtocolException(message='Required field time_taken_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultSetIter:
  """
  Attributes:
   - statement_index_
   - current_index_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'statement_index_', None, None, ), # 1
    (2, TType.I64, 'current_index_', None, None, ), # 2
  )

  def __init__(self, statement_index_=None, current_index_=None,):
    self.statement_index_ = statement_index_
    self.current_index_ = current_index_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.statement_index_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.current_index_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultSetIter')
    if self.statement_index_ is not None:
      oprot.writeFieldBegin('statement_index_', TType.I64, 1)
      oprot.writeI64(self.statement_index_)
      oprot.writeFieldEnd()
    if self.current_index_ is not None:
      oprot.writeFieldBegin('current_index_', TType.I64, 2)
      oprot.writeI64(self.current_index_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.statement_index_ is None:
      raise TProtocol.TProtocolException(message='Required field statement_index_ is unset!')
    if self.current_index_ is None:
      raise TProtocol.TProtocolException(message='Required field current_index_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExceptionSQLite(TException):
  """
  Attributes:
   - error_code_
   - error_message_
   - error_code_extended_
   - query_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'error_code_', None, None, ), # 1
    (2, TType.STRING, 'error_message_', None, None, ), # 2
    (3, TType.I64, 'error_code_extended_', None, None, ), # 3
    (4, TType.STRING, 'query_', None, None, ), # 4
  )

  def __init__(self, error_code_=None, error_message_=None, error_code_extended_=None, query_=None,):
    self.error_code_ = error_code_
    self.error_message_ = error_message_
    self.error_code_extended_ = error_code_extended_
    self.query_ = query_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.error_code_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_message_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.error_code_extended_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.query_ = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExceptionSQLite')
    if self.error_code_ is not None:
      oprot.writeFieldBegin('error_code_', TType.I64, 1)
      oprot.writeI64(self.error_code_)
      oprot.writeFieldEnd()
    if self.error_message_ is not None:
      oprot.writeFieldBegin('error_message_', TType.STRING, 2)
      oprot.writeString(self.error_message_)
      oprot.writeFieldEnd()
    if self.error_code_extended_ is not None:
      oprot.writeFieldBegin('error_code_extended_', TType.I64, 3)
      oprot.writeI64(self.error_code_extended_)
      oprot.writeFieldEnd()
    if self.query_ is not None:
      oprot.writeFieldBegin('query_', TType.STRING, 4)
      oprot.writeString(self.query_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.error_code_ is None:
      raise TProtocol.TProtocolException(message='Required field error_code_ is unset!')
    if self.error_message_ is None:
      raise TProtocol.TProtocolException(message='Required field error_message_ is unset!')
    if self.error_code_extended_ is None:
      raise TProtocol.TProtocolException(message='Required field error_code_extended_ is unset!')
    if self.query_ is None:
      raise TProtocol.TProtocolException(message='Required field query_ is unset!')
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExceptionFileSystem(TException):
  """
  Attributes:
   - error_code_
   - error_message_
   - object_
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'error_code_', None, None, ), # 1
    (2, TType.STRING, 'error_message_', None, None, ), # 2
    (3, TType.STRING, 'object_', None, None, ), # 3
  )

  def __init__(self, error_code_=None, error_message_=None, object_=None,):
    self.error_code_ = error_code_
    self.error_message_ = error_message_
    self.object_ = object_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.error_code_ = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_message_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.object_ = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExceptionFileSystem')
    if self.error_code_ is not None:
      oprot.writeFieldBegin('error_code_', TType.I64, 1)
      oprot.writeI64(self.error_code_)
      oprot.writeFieldEnd()
    if self.error_message_ is not None:
      oprot.writeFieldBegin('error_message_', TType.STRING, 2)
      oprot.writeString(self.error_message_)
      oprot.writeFieldEnd()
    if self.object_ is not None:
      oprot.writeFieldBegin('object_', TType.STRING, 3)
      oprot.writeString(self.object_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.error_code_ is None:
      raise TProtocol.TProtocolException(message='Required field error_code_ is unset!')
    if self.error_message_ is None:
      raise TProtocol.TProtocolException(message='Required field error_message_ is unset!')
    if self.object_ is None:
      raise TProtocol.TProtocolException(message='Required field object_ is unset!')
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExceptionMachineUnderMaintenance(TException):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExceptionMachineUnderMaintenance')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExceptionUserUnderMaintenance(TException):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExceptionUserUnderMaintenance')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserMaintenanceConf:
  """
  Attributes:
   - is_read_disabled_
   - is_write_disabled_
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_read_disabled_', None, False, ), # 1
    (2, TType.BOOL, 'is_write_disabled_', None, False, ), # 2
  )

  def __init__(self, is_read_disabled_=thrift_spec[1][4], is_write_disabled_=thrift_spec[2][4],):
    self.is_read_disabled_ = is_read_disabled_
    self.is_write_disabled_ = is_write_disabled_

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_read_disabled_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_write_disabled_ = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserMaintenanceConf')
    if self.is_read_disabled_ is not None:
      oprot.writeFieldBegin('is_read_disabled_', TType.BOOL, 1)
      oprot.writeBool(self.is_read_disabled_)
      oprot.writeFieldEnd()
    if self.is_write_disabled_ is not None:
      oprot.writeFieldBegin('is_write_disabled_', TType.BOOL, 2)
      oprot.writeBool(self.is_write_disabled_)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.is_read_disabled_ is None:
      raise TProtocol.TProtocolException(message='Required field is_read_disabled_ is unset!')
    if self.is_write_disabled_ is None:
      raise TProtocol.TProtocolException(message='Required field is_write_disabled_ is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
